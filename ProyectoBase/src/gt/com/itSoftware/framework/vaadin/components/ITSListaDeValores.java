package gt.com.itSoftware.framework.vaadin.components;

import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbstractTextField;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;

import gt.com.itSoftware.framework.core.services.IServiceLocator;
import gt.com.itSoftware.framework.vaadin.components.data.PropiedadFiltro;
import gt.com.itSoftware.framework.vaadin.utils.VaadinUtils;

public class ITSListaDeValores extends CustomComponent  {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Button btnLimpiar;
	@AutoGenerated
	private Button botonLista;
	@AutoGenerated
	private TextField datos;
	private Object value;
	private ITSDataBaseDataProvider provider = null;
	private IServiceLocator serviceLocator = null;
	private String[] titulos = null;
	//private Class[] tiposDeDatos =  new Class[]{String.class,String.class};
	private Component[] listasDependientes  = null;
	private Component[] listaComponentesAsignacion  = null;	
	private String where = "";
	private String filtro = "";
	private boolean habilitarBusqueda = true;
	private String lovWindowWidth = "-1px";
	private Object[] visibleColumns = null;
	private Integer columnaCodigo = 0;
	private Integer columnaDescripcion = 1;
	private Integer windowPositionX = null;
	private Integer windowPositionY = null;
	private List<PropiedadFiltro> listaPropiedades = new LinkedList<PropiedadFiltro>();
	private Boolean focusBusqueda = true;
	
	
	public void setFocusBusqueda(Boolean focusBusqueda) {
		this.focusBusqueda = focusBusqueda;
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ITSListaDeValores() {
		buildMainLayout();
		setCompositionRoot(mainLayout);		
		addComponents();		
		datos.setEnabled(false);
		botonLista.setCaption("");
		setWidthText("300px");
	}

	
	public Integer getColumnaDescripcion() {
		return columnaDescripcion;
	}
	
	public void setComponentesAsignacion (Component ...components ){
		this.listaComponentesAsignacion = components;
	}
	
	public void setEnableTexfield(boolean enabled){
		datos.setEnabled(enabled);
		
	}
	
	public void setVisibleTextField(boolean visible){
		datos.setVisible(visible);
	}
	
	public void setVisibleBotonLimpiar(boolean mostrar){
		btnLimpiar.setVisible(mostrar);
	}
	
	public void setTabIndexTextfield(Integer index){
		datos.setTabIndex(index);
	}
	
	public void setTabIndexBoton(Integer index){
		botonLista.setTabIndex(index);
	}
	
	public void focusTextfield(){
		datos.focus();		
	}
	
	public void setInputPrompt(String prompt){
		datos.setInputPrompt(prompt);
	}
	
	public void setColumnaDescripcion(Integer columnaDescripcion) {
		this.columnaDescripcion = columnaDescripcion;
	}
	
	public void setColumnaCodigo(Integer columnaCodigo) {
		this.columnaCodigo = columnaCodigo;
	}
	
	public Integer getColumnaCodigo() {
		return columnaCodigo;
	}
	
	public void setVisibleColumns(Object... visibleColumns) {
		this.visibleColumns = visibleColumns;
	}
	
	public Object[] getVisibleColumns() {
		return visibleColumns;
	}
	
	public void setLovWindowWidth(String lovWindowWidth) {
		this.lovWindowWidth = lovWindowWidth;
	}
	
	public String getLovWindowWidth() {
		return lovWindowWidth;
	}
	
	public void habilitarBusqueda(boolean habilitar){
		habilitarBusqueda = habilitar;
	}
	
	public void showLov(){
		botonLista.click();
	}
	
	public void ocultarBotonBusqueda(){
		botonLista.setVisible(false);
	}
	
	public void mostrarBotonBusqueda(){
		botonLista.setVisible(true);
	}
	
	public void setIconBotonBusqueda(Resource icon){
		botonLista.setIcon(icon);
	}
	
	public void setCaptioBotonBusqueda(String caption){
		botonLista.setCaption(caption);
	}
	
	
	
	private void addComponents() {
		
		btnLimpiar.setTabIndex(-1);
		btnLimpiar.setIcon(new ThemeResource("img/limpiar16_1.png"));
		btnLimpiar.addClickListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				clearComponent();
			}
			
		});
		
		botonLista.setTabIndex(-1);
		botonLista.setIcon(new ThemeResource("img/verDetalle16_3.png"));		
		botonLista.addClickListener(new ClickListener() {
			
			

			@Override
			public void buttonClick(ClickEvent event) {
				// verifica si existe alguna dependencia.
				if (listasDependientes != null)
					for (Object dependiente : listasDependientes){
						if (dependiente instanceof ITSListaDeValores){
							if(((ITSListaDeValores)dependiente).getData() == null){
								Notification.show("Error de validación:","\nNO se ha seleccionado ningún valor en el campo \""+((ITSListaDeValores)dependiente).getCaption()+"\"",Type.ERROR_MESSAGE);
								return;
								//throw new RuntimeException("Se debe seleccionar ")
							}
						}else{
							if (dependiente instanceof AbstractTextField){
								if(((AbstractTextField)dependiente).getValue() == null || ((AbstractTextField)dependiente).getValue().isEmpty()){
									Notification.show("Error de validación:","\nNO se ha seleccionado ningún valor en el campo \""+((AbstractTextField)dependiente).getCaption()+"\"",Type.ERROR_MESSAGE);
									((AbstractTextField)dependiente).focus();
									return;
									//throw new RuntimeException("Se debe seleccionar ")
								}
							}
						}
						
					}
				TextField campo = null;
				
				ITSListaDeValoresWindow w = new ITSListaDeValoresWindow();
				// se activan los campos visibles.
				for (PropiedadFiltro propiedad: listaPropiedades){
					campo =	w.obtenerComponenteBusqueda(propiedad.getId()-1);
					campo.setVisible(true);
					campo.setCaption(propiedad.getCaption());
					campo.setWidth(propiedad.getWidth());
					campo.setDescription(propiedad.getTooltip());
				}
				if (getCaption() != null){
					w.setCaption(getCaption().replaceAll(":", ""));
				}
				
				// habilita / deshabilita la busqueda en la ventana de lista de valores.
				w.habilitarBusqueda(habilitarBusqueda);
					
				// define que columna sera la del codigo.
				w.setColumnaCodigo(getColumnaCodigo());
				// listado de componentes a los cuales les debe asignar un valor de la ventana de lista de valores.
				Object[] listaComponentes =  null;
				if ( listaComponentesAsignacion == null){
					listaComponentes = new Object[columnaDescripcion+1];
					listaComponentes[columnaDescripcion]= datos;
				}else{
					listaComponentes = listaComponentesAsignacion;
					listaComponentes[columnaDescripcion]= datos;
				}					
				//listaComponentes[columnaDescripcion]= datos;
				w.setComponentesAsignacion(listaComponentes);	
				// define que el componente principal es el numero 1 en el listado de componentes asignacion.
				w.setComponentePrincipal(columnaDescripcion);
				if (titulos == null){
					if (provider.getColumnNames() == null){
						titulos = new String[]{"Código","Descripción"};	
					}else
						titulos = provider.getColumnNames();					 
				}
				w.setTitulosResultados(titulos,provider.getColumnDataType());
				// define que columans mostrará la pantalla de busqueda
				if (getVisibleColumns() != null)
				w.setVisibleColumns(visibleColumns);
				// define el tamaño de la pantalla, de lo contrario, se autoajusta.
				if (getLovWindowWidth() != null)
					w.setLovTableWidth(getLovWindowWidth());
				

				try {
					int contador = 0;
					String tmpWhere = where;
					if (!tmpWhere.isEmpty() && listasDependientes != null){
						for (Component dependiente: listasDependientes){
							contador++;		
							if (dependiente instanceof ITSListaDeValores)
								tmpWhere = tmpWhere.replaceAll(":P"+contador, ((ITSListaDeValores)dependiente).getData().toString());
							else
								if (dependiente instanceof AbstractTextField)
									tmpWhere = tmpWhere.replaceAll(":P"+contador, ((TextField)dependiente).getValue().toString());
						}
						//System.out.println(tmpWhere);
						provider.setWhere(tmpWhere);
					}
					if (!filtro.isEmpty()){
						w.setFiltro(filtro);						
					}
					
					w.setServiceLocator(serviceLocator);
					w.setProvider(provider);
					w.llenarDatosProvider();
				} catch (Exception e1) {
					Notification.show("Error", "\nError al obtener datos", Type.ERROR_MESSAGE);
					e1.printStackTrace();
				}
				
				w.center();			
				if (windowPositionX != null  ){					
					w.setPositionX(windowPositionX);
				}
				if ( windowPositionY != null){		
					w.setPositionY(windowPositionY);
				}
				if (focusBusqueda == true)
					w.focusBusqueda();
				UI.getCurrent().addWindow(w);
			}
		});
		
	}
	
	/**
	 * Permite seleccionar un valor únicamente pasando el código de configurado para la lista de valores. El parámetro debe ser del mismo tipo de
	 * datos que la columna código. 
	 * @param o 
	 */
	public void selectData(Object o){
		// verifica si existe alguna dependencia.
		if (listasDependientes != null){
			for (Object dependiente : listasDependientes){
				if (dependiente instanceof ITSListaDeValores){
					if(((ITSListaDeValores)dependiente).getData() == null){
						Notification.show("Error de validación:","\nNO se ha seleccionado ningún valor en el campo \""+((ITSListaDeValores)dependiente).getCaption()+"\"",Type.ERROR_MESSAGE);
						return;
					}
				}else{
					if (dependiente instanceof AbstractTextField){
						if(((AbstractTextField)dependiente).getValue() == null || ((AbstractTextField)dependiente).getValue().isEmpty()){
							Notification.show("Error de validación:","\nNO se ha seleccionado ningún valor en el campo \""+((AbstractTextField)dependiente).getCaption()+"\"",Type.ERROR_MESSAGE);
							((AbstractTextField)dependiente).focus();
							return;
						}
					}
				}
				
			}
		}

		try {
			int contador = 0;
			String tmpWhere = where;
			if (!tmpWhere.isEmpty() && listasDependientes != null){
				for (Component dependiente: listasDependientes){
					contador++;		
					if (dependiente instanceof ITSListaDeValores)
						tmpWhere = tmpWhere.replaceAll(":P"+contador, ((ITSListaDeValores)dependiente).getData().toString());
					else
						if (dependiente instanceof AbstractTextField)
							tmpWhere = tmpWhere.replaceAll(":P"+contador, ((TextField)dependiente).getValue().toString());
				}
				provider.setWhere(tmpWhere);
			}
			if (!filtro.isEmpty()){
				provider.setFiltro(filtro);						
			}
			
			Object[][] resdatos = serviceLocator.getConsultaDataBaseProvider(provider);
			for(Object[] obj : resdatos){
				if (compararObjectosSegunTipoDato(obj[getColumnaCodigo()], o)){
					setValue(obj[getColumnaDescripcion()]);
					setData(obj[getColumnaCodigo()]);
				}
			}
		} catch (Exception e1) {
			Notification.show("Error", "\nError al obtener datos", Type.ERROR_MESSAGE);
			e1.printStackTrace();
		}
		
		
	}
	
	private boolean compararObjectosSegunTipoDato(Object o1, Object o2){
		if (o1.getClass().equals(o2.getClass())){
			if (o1 instanceof BigDecimal){
				return ((BigDecimal)o1).equals((BigDecimal)o2);
			}else if (o1 instanceof String){
				return ((String)o1).equals((String)o2);
			}else if (o1 instanceof Integer){
				return ((Integer)o1) == ((Integer)o2);
			}else if (o1 instanceof Long){
				return ((Long)o1) == ((Long)o2);
			}
		}
		return false;
	}
	
	public void addValueChangeListener(ValueChangeListener listener){
		datos.addValueChangeListener(listener);
	}
	
	public void addFiltroVisible (Integer id, String size , String caption , String tooltip ){
		listaPropiedades.add(new PropiedadFiltro(id, size, caption, tooltip));	
	}
	
	
	public void setListasDependientes(ITSListaDeValores ... listasDependientes) {
		this.listasDependientes = listasDependientes;
	}

	/**
	 * Las implementaciones Se encuentran unicamente para componentes de texto o SIBlistaDeValores.
	 * @param listasDependientes
	 */
	public void setComponentesDependientes(Component ... listasDependientes) {
		this.listasDependientes = listasDependientes;
	}
	
	public void setWhere(String where) {
		this.where = where;
	}
	
	public void setFiltro(String filtro) {
		this.filtro = filtro;
	}
	
	public void setWindowPosition(Integer windowPositionX) {
		this.windowPositionX = windowPositionX;
	}
	
	public void setWindowPositionY(Integer windowPositionY) {
		this.windowPositionY = windowPositionY;
	}
	
	public void setProvider (ITSDataBaseDataProvider provider){
		this.setFiltro(provider.getFiltro());
		this.setWhere(provider.getWhere());
		this.provider = provider;		
	}
	
	public void setServiceLocator(IServiceLocator serviceLocator) {
		this.serviceLocator = serviceLocator;
	}
	
	public void setTitulosResultados (String[] titulos, Class[] tiposDeDatos){
		this.titulos = titulos;
		this.provider.setColumnDataType(tiposDeDatos);
	}
	
	public void setTitulosResultados (String[] titulos){
		this.titulos = titulos;		
	}

	public void setEnableTextfield(boolean valor){
		datos.setEnabled(valor);
	}
	
	public Object getValue() {
		return datos.getValue();
	}
	
	@Override
	public void setData(Object data) {	
		datos.setData(data);
	}
	
	public void addButtonClickListener(ClickListener listener){
		botonLista.addClickListener(listener);
	}

	public void setValue(Object value) {
		this.value = value;
		if (value == null)
			datos.setValue(null);
		else
			datos.setValue(this.value.toString());
	}

	public void setTabIndex (int index){
		datos.setTabIndex(index);
	}
	
	@Override
	public void setEnabled(boolean enabled) {
		botonLista.setEnabled(enabled);
		btnLimpiar.setEnabled(enabled);
	}
	
	public void clearComponent(){
		setData(null);
		datos.setData(null);
		datos.setValue("");
	}
	
	public Object getData(){
		return datos.getData();
	}

	
	public void setWidthText(String pWidth)
	{
		mainLayout.setWidth(pWidth);
	}
	
	public void setHeightContenedorText(String pHeight)
	{
		mainLayout.setHeight(pHeight);
	}

	
	@Override
	public void setWidth(String width) {		
		super.setWidth(width);
		mainLayout.setWidth(width);
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("300px");
		mainLayout.setHeight("26px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("300px");
		setHeight("26px");
		
		// datos
		datos = new TextField();
		datos.setImmediate(false);
		datos.setWidth("100.0%");
		datos.setHeight("-1px");
		mainLayout.addComponent(datos);
		mainLayout.setExpandRatio(datos, 1.0f);
		
		// botonLista
		botonLista = new Button();
		botonLista.setCaption("");
		botonLista.setImmediate(true);
		botonLista.setWidth("-1px");
		botonLista.setHeight("-1px");
		mainLayout.addComponent(botonLista);
		
		// btnLimpiar
		btnLimpiar = new Button();
		btnLimpiar.setCaption("");		
		btnLimpiar.setImmediate(true);
		btnLimpiar.setVisible(false);
		btnLimpiar.setDescription("Limpiar campo");
		btnLimpiar.setWidth("-1px");
		btnLimpiar.setHeight("-1px");
		mainLayout.addComponent(btnLimpiar);
		
		return mainLayout;
	}
	
	public void addTextFieldDateFormat(){
		VaadinUtils.addTextfieldDateFormat(datos);
	}
	

}
